/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup HwTinyFISHSettings HwTinyFISHSettings
 * @brief fishpepper.de tinyFISH Flight Controller hardware configuration
 *
 * Autogenerated files and functions for HwTinyFISHSettings Object
 *
 * @{
 *
 * @file       hwtinyfishsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the HwTinyFISHSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: hwtinyfishsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWTINYFISHSETTINGS_H
#define HWTINYFISHSETTINGS_H
#include <stdbool.h>

/* Object constants */
#define HWTINYFISHSETTINGS_OBJID 0xF9736146
#define HWTINYFISHSETTINGS_ISSINGLEINST 1
#define HWTINYFISHSETTINGS_ISSETTINGS 1
#define HWTINYFISHSETTINGS_ISPRIORITY 0
#define HWTINYFISHSETTINGS_NUMBYTES sizeof(HwTinyFISHSettingsData)

/* Generic interface functions */
int32_t HwTinyFISHSettingsInitialize();
UAVObjHandle HwTinyFISHSettingsHandle();
void HwTinyFISHSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field UART1Port information */

// Enumeration options for field UART1Port
typedef enum __attribute__ ((__packed__)) {
    HWTINYFISHSETTINGS_UART1PORT_DISABLED=0,
    HWTINYFISHSETTINGS_UART1PORT_COMBRIDGE=1
} HwTinyFISHSettingsUART1PortOptions;

/* Field UART3Port information */

// Enumeration options for field UART3Port
typedef enum __attribute__ ((__packed__)) {
    HWTINYFISHSETTINGS_UART3PORT_DISABLED=0,
    HWTINYFISHSETTINGS_UART3PORT_TELEMETRY=1,
    HWTINYFISHSETTINGS_UART3PORT_GPS=2,
    HWTINYFISHSETTINGS_UART3PORT_SBUS=3,
    HWTINYFISHSETTINGS_UART3PORT_DSM=4,
    HWTINYFISHSETTINGS_UART3PORT_EXBUS=5,
    HWTINYFISHSETTINGS_UART3PORT_HOTTSUMD=6,
    HWTINYFISHSETTINGS_UART3PORT_HOTTSUMH=7,
    HWTINYFISHSETTINGS_UART3PORT_SRXL=8,
    HWTINYFISHSETTINGS_UART3PORT_IBUS=9,
    HWTINYFISHSETTINGS_UART3PORT_DEBUGCONSOLE=10,
    HWTINYFISHSETTINGS_UART3PORT_COMBRIDGE=11,
    HWTINYFISHSETTINGS_UART3PORT_MSP=12,
    HWTINYFISHSETTINGS_UART3PORT_MAVLINK=13,
    HWTINYFISHSETTINGS_UART3PORT_HOTTTELEMETRY=14,
    HWTINYFISHSETTINGS_UART3PORT_FRSKYSENSORHUB=15,
    HWTINYFISHSETTINGS_UART3PORT_PPM=16,
    HWTINYFISHSETTINGS_UART3PORT_OUTPUTS=17
} HwTinyFISHSettingsUART3PortOptions;

/* Field LEDPort information */

// Enumeration options for field LEDPort
typedef enum __attribute__ ((__packed__)) {
    HWTINYFISHSETTINGS_LEDPORT_DISABLED=0,
    HWTINYFISHSETTINGS_LEDPORT_WS281X=1
} HwTinyFISHSettingsLEDPortOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        HwTinyFISHSettingsUART1PortOptions UART1Port;
    HwTinyFISHSettingsUART3PortOptions UART3Port;
    HwTinyFISHSettingsLEDPortOptions LEDPort;

} __attribute__((packed)) HwTinyFISHSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef HwTinyFISHSettingsDataPacked __attribute__((aligned(4))) HwTinyFISHSettingsData;

void HwTinyFISHSettingsDataOverrideDefaults(HwTinyFISHSettingsData * data);

/* Typesafe Object access functions */
static inline int32_t HwTinyFISHSettingsGet(HwTinyFISHSettingsData * dataOut) {
    return UAVObjGetData(HwTinyFISHSettingsHandle(), dataOut);
}
static inline int32_t HwTinyFISHSettingsSet(const HwTinyFISHSettingsData * dataIn) {
    return UAVObjSetData(HwTinyFISHSettingsHandle(), dataIn);
}
static inline int32_t HwTinyFISHSettingsInstGet(uint16_t instId, HwTinyFISHSettingsData * dataOut) {
    return UAVObjGetInstanceData(HwTinyFISHSettingsHandle(), instId, dataOut);
}
static inline int32_t HwTinyFISHSettingsInstSet(uint16_t instId, const HwTinyFISHSettingsData * dataIn) {
    return UAVObjSetInstanceData(HwTinyFISHSettingsHandle(), instId, dataIn);
}
static inline int32_t HwTinyFISHSettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(HwTinyFISHSettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t HwTinyFISHSettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwTinyFISHSettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t HwTinyFISHSettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwTinyFISHSettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t HwTinyFISHSettingsCreateInstance() {
    return UAVObjCreateInstance(HwTinyFISHSettingsHandle());
}
static inline void HwTinyFISHSettingsRequestUpdate() {
    UAVObjRequestUpdate(HwTinyFISHSettingsHandle());
}
static inline void HwTinyFISHSettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(HwTinyFISHSettingsHandle(), instId);
}
static inline void HwTinyFISHSettingsUpdated() {
    UAVObjUpdated(HwTinyFISHSettingsHandle());
}
static inline void HwTinyFISHSettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(HwTinyFISHSettingsHandle(), instId);
}
static inline void HwTinyFISHSettingsLogging() {
    UAVObjLogging(HwTinyFISHSettingsHandle());
}
static inline void HwTinyFISHSettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(HwTinyFISHSettingsHandle(), instId);
}
static inline int32_t HwTinyFISHSettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(HwTinyFISHSettingsHandle(), dataOut);
}
static inline int32_t HwTinyFISHSettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(HwTinyFISHSettingsHandle(), dataIn);
}
static inline int8_t HwTinyFISHSettingsReadOnly() {
    return UAVObjReadOnly(HwTinyFISHSettingsHandle());
}

/* Set/Get functions */
extern void HwTinyFISHSettingsUART1PortSet(HwTinyFISHSettingsUART1PortOptions *NewUART1Port);
extern void HwTinyFISHSettingsUART1PortGet(HwTinyFISHSettingsUART1PortOptions *NewUART1Port);
extern void HwTinyFISHSettingsUART3PortSet(HwTinyFISHSettingsUART3PortOptions *NewUART3Port);
extern void HwTinyFISHSettingsUART3PortGet(HwTinyFISHSettingsUART3PortOptions *NewUART3Port);
extern void HwTinyFISHSettingsLEDPortSet(HwTinyFISHSettingsLEDPortOptions *NewLEDPort);
extern void HwTinyFISHSettingsLEDPortGet(HwTinyFISHSettingsLEDPortOptions *NewLEDPort);


#endif // HWTINYFISHSETTINGS_H

/**
 * @}
 * @}
 */
