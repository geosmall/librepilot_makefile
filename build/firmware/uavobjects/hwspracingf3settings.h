/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup HwSPRacingF3Settings HwSPRacingF3Settings
 * @brief Seriously Pro SPRacingF3 hardware configuration.
 *
 * Autogenerated files and functions for HwSPRacingF3Settings Object
 *
 * @{
 *
 * @file       hwspracingf3settings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the HwSPRacingF3Settings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: hwspracingf3settings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSPRACINGF3SETTINGS_H
#define HWSPRACINGF3SETTINGS_H
#include <stdbool.h>

/* Object constants */
#define HWSPRACINGF3SETTINGS_OBJID 0xFCF19578
#define HWSPRACINGF3SETTINGS_ISSINGLEINST 1
#define HWSPRACINGF3SETTINGS_ISSETTINGS 1
#define HWSPRACINGF3SETTINGS_ISPRIORITY 0
#define HWSPRACINGF3SETTINGS_NUMBYTES sizeof(HwSPRacingF3SettingsData)

/* Generic interface functions */
int32_t HwSPRacingF3SettingsInitialize();
UAVObjHandle HwSPRacingF3SettingsHandle();
void HwSPRacingF3SettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field UARTPort information */

// Enumeration options for field UARTPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3SETTINGS_UARTPORT_DISABLED=0,
    HWSPRACINGF3SETTINGS_UARTPORT_TELEMETRY=1,
    HWSPRACINGF3SETTINGS_UARTPORT_GPS=2,
    HWSPRACINGF3SETTINGS_UARTPORT_SBUS=3,
    HWSPRACINGF3SETTINGS_UARTPORT_DSM=4,
    HWSPRACINGF3SETTINGS_UARTPORT_EXBUS=5,
    HWSPRACINGF3SETTINGS_UARTPORT_HOTTSUMD=6,
    HWSPRACINGF3SETTINGS_UARTPORT_HOTTSUMH=7,
    HWSPRACINGF3SETTINGS_UARTPORT_SRXL=8,
    HWSPRACINGF3SETTINGS_UARTPORT_IBUS=9,
    HWSPRACINGF3SETTINGS_UARTPORT_DEBUGCONSOLE=10,
    HWSPRACINGF3SETTINGS_UARTPORT_COMBRIDGE=11,
    HWSPRACINGF3SETTINGS_UARTPORT_MSP=12,
    HWSPRACINGF3SETTINGS_UARTPORT_MAVLINK=13,
    HWSPRACINGF3SETTINGS_UARTPORT_HOTTTELEMETRY=14,
    HWSPRACINGF3SETTINGS_UARTPORT_FRSKYSENSORHUB=15
} HwSPRacingF3SettingsUARTPortOptions;

// Number of elements for field UARTPort
#define HWSPRACINGF3SETTINGS_UARTPORT_NUMELEM 3

/* Field I2CPort information */

// Enumeration options for field I2CPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3SETTINGS_I2CPORT_DISABLED=0,
    HWSPRACINGF3SETTINGS_I2CPORT_I2C=1
} HwSPRacingF3SettingsI2CPortOptions;

/* Field LEDPort information */

// Enumeration options for field LEDPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3SETTINGS_LEDPORT_DISABLED=0,
    HWSPRACINGF3SETTINGS_LEDPORT_WS281X=1
} HwSPRacingF3SettingsLEDPortOptions;

/* Field IOPorts information */

// Enumeration options for field IOPorts
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3SETTINGS_IOPORTS_DISABLED=0,
    HWSPRACINGF3SETTINGS_IOPORTS_PPM=1,
    HWSPRACINGF3SETTINGS_IOPORTS_PWM=2,
    HWSPRACINGF3SETTINGS_IOPORTS_PPMPWM=3,
    HWSPRACINGF3SETTINGS_IOPORTS_OUTPUTS=4,
    HWSPRACINGF3SETTINGS_IOPORTS_PPMOUTPUTS=5
} HwSPRacingF3SettingsIOPortsOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        HwSPRacingF3SettingsUARTPortOptions UARTPort[3];
    HwSPRacingF3SettingsI2CPortOptions I2CPort;
    HwSPRacingF3SettingsLEDPortOptions LEDPort;
    HwSPRacingF3SettingsIOPortsOptions IOPorts;

} __attribute__((packed)) HwSPRacingF3SettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef HwSPRacingF3SettingsDataPacked __attribute__((aligned(4))) HwSPRacingF3SettingsData;

void HwSPRacingF3SettingsDataOverrideDefaults(HwSPRacingF3SettingsData * data);

/* Typesafe Object access functions */
static inline int32_t HwSPRacingF3SettingsGet(HwSPRacingF3SettingsData * dataOut) {
    return UAVObjGetData(HwSPRacingF3SettingsHandle(), dataOut);
}
static inline int32_t HwSPRacingF3SettingsSet(const HwSPRacingF3SettingsData * dataIn) {
    return UAVObjSetData(HwSPRacingF3SettingsHandle(), dataIn);
}
static inline int32_t HwSPRacingF3SettingsInstGet(uint16_t instId, HwSPRacingF3SettingsData * dataOut) {
    return UAVObjGetInstanceData(HwSPRacingF3SettingsHandle(), instId, dataOut);
}
static inline int32_t HwSPRacingF3SettingsInstSet(uint16_t instId, const HwSPRacingF3SettingsData * dataIn) {
    return UAVObjSetInstanceData(HwSPRacingF3SettingsHandle(), instId, dataIn);
}
static inline int32_t HwSPRacingF3SettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(HwSPRacingF3SettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t HwSPRacingF3SettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwSPRacingF3SettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t HwSPRacingF3SettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwSPRacingF3SettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t HwSPRacingF3SettingsCreateInstance() {
    return UAVObjCreateInstance(HwSPRacingF3SettingsHandle());
}
static inline void HwSPRacingF3SettingsRequestUpdate() {
    UAVObjRequestUpdate(HwSPRacingF3SettingsHandle());
}
static inline void HwSPRacingF3SettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(HwSPRacingF3SettingsHandle(), instId);
}
static inline void HwSPRacingF3SettingsUpdated() {
    UAVObjUpdated(HwSPRacingF3SettingsHandle());
}
static inline void HwSPRacingF3SettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(HwSPRacingF3SettingsHandle(), instId);
}
static inline void HwSPRacingF3SettingsLogging() {
    UAVObjLogging(HwSPRacingF3SettingsHandle());
}
static inline void HwSPRacingF3SettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(HwSPRacingF3SettingsHandle(), instId);
}
static inline int32_t HwSPRacingF3SettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(HwSPRacingF3SettingsHandle(), dataOut);
}
static inline int32_t HwSPRacingF3SettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(HwSPRacingF3SettingsHandle(), dataIn);
}
static inline int8_t HwSPRacingF3SettingsReadOnly() {
    return UAVObjReadOnly(HwSPRacingF3SettingsHandle());
}

/* Set/Get functions */
extern void HwSPRacingF3SettingsUARTPortSet(HwSPRacingF3SettingsUARTPortOptions *NewUARTPort);
extern void HwSPRacingF3SettingsUARTPortGet(HwSPRacingF3SettingsUARTPortOptions *NewUARTPort);
extern void HwSPRacingF3SettingsI2CPortSet(HwSPRacingF3SettingsI2CPortOptions *NewI2CPort);
extern void HwSPRacingF3SettingsI2CPortGet(HwSPRacingF3SettingsI2CPortOptions *NewI2CPort);
extern void HwSPRacingF3SettingsLEDPortSet(HwSPRacingF3SettingsLEDPortOptions *NewLEDPort);
extern void HwSPRacingF3SettingsLEDPortGet(HwSPRacingF3SettingsLEDPortOptions *NewLEDPort);
extern void HwSPRacingF3SettingsIOPortsSet(HwSPRacingF3SettingsIOPortsOptions *NewIOPorts);
extern void HwSPRacingF3SettingsIOPortsGet(HwSPRacingF3SettingsIOPortsOptions *NewIOPorts);


#endif // HWSPRACINGF3SETTINGS_H

/**
 * @}
 * @}
 */
