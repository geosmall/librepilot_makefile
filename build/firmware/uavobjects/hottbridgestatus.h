/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup HoTTBridgeStatus HoTTBridgeStatus
 * @brief HoTTBridge Status Information
 *
 * Autogenerated files and functions for HoTTBridgeStatus Object
 *
 * @{
 *
 * @file       hottbridgestatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the HoTTBridgeStatus object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: hottbridgestatus.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HOTTBRIDGESTATUS_H
#define HOTTBRIDGESTATUS_H
#include <stdbool.h>

/* Object constants */
#define HOTTBRIDGESTATUS_OBJID 0x860C5F84
#define HOTTBRIDGESTATUS_ISSINGLEINST 1
#define HOTTBRIDGESTATUS_ISSETTINGS 0
#define HOTTBRIDGESTATUS_ISPRIORITY 1
#define HOTTBRIDGESTATUS_NUMBYTES sizeof(HoTTBridgeStatusData)

/* Generic interface functions */
int32_t HoTTBridgeStatusInitialize();
UAVObjHandle HoTTBridgeStatusHandle();
void HoTTBridgeStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field TxPackets information */

/* Field RxPackets information */

/* Field TxFail information */

/* Field RxFail information */




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        uint32_t TxPackets;
    uint32_t RxPackets;
    uint32_t TxFail;
    uint32_t RxFail;

} __attribute__((packed)) HoTTBridgeStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef HoTTBridgeStatusDataPacked __attribute__((aligned(4))) HoTTBridgeStatusData;

void HoTTBridgeStatusDataOverrideDefaults(HoTTBridgeStatusData * data);

/* Typesafe Object access functions */
static inline int32_t HoTTBridgeStatusGet(HoTTBridgeStatusData * dataOut) {
    return UAVObjGetData(HoTTBridgeStatusHandle(), dataOut);
}
static inline int32_t HoTTBridgeStatusSet(const HoTTBridgeStatusData * dataIn) {
    return UAVObjSetData(HoTTBridgeStatusHandle(), dataIn);
}
static inline int32_t HoTTBridgeStatusInstGet(uint16_t instId, HoTTBridgeStatusData * dataOut) {
    return UAVObjGetInstanceData(HoTTBridgeStatusHandle(), instId, dataOut);
}
static inline int32_t HoTTBridgeStatusInstSet(uint16_t instId, const HoTTBridgeStatusData * dataIn) {
    return UAVObjSetInstanceData(HoTTBridgeStatusHandle(), instId, dataIn);
}
static inline int32_t HoTTBridgeStatusConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(HoTTBridgeStatusHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t HoTTBridgeStatusConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HoTTBridgeStatusHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t HoTTBridgeStatusConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HoTTBridgeStatusHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t HoTTBridgeStatusCreateInstance() {
    return UAVObjCreateInstance(HoTTBridgeStatusHandle());
}
static inline void HoTTBridgeStatusRequestUpdate() {
    UAVObjRequestUpdate(HoTTBridgeStatusHandle());
}
static inline void HoTTBridgeStatusRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(HoTTBridgeStatusHandle(), instId);
}
static inline void HoTTBridgeStatusUpdated() {
    UAVObjUpdated(HoTTBridgeStatusHandle());
}
static inline void HoTTBridgeStatusInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(HoTTBridgeStatusHandle(), instId);
}
static inline void HoTTBridgeStatusLogging() {
    UAVObjLogging(HoTTBridgeStatusHandle());
}
static inline void HoTTBridgeStatusInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(HoTTBridgeStatusHandle(), instId);
}
static inline int32_t HoTTBridgeStatusGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(HoTTBridgeStatusHandle(), dataOut);
}
static inline int32_t HoTTBridgeStatusSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(HoTTBridgeStatusHandle(), dataIn);
}
static inline int8_t HoTTBridgeStatusReadOnly() {
    return UAVObjReadOnly(HoTTBridgeStatusHandle());
}

/* Set/Get functions */
extern void HoTTBridgeStatusTxPacketsSet(uint32_t *NewTxPackets);
extern void HoTTBridgeStatusTxPacketsGet(uint32_t *NewTxPackets);
extern void HoTTBridgeStatusRxPacketsSet(uint32_t *NewRxPackets);
extern void HoTTBridgeStatusRxPacketsGet(uint32_t *NewRxPackets);
extern void HoTTBridgeStatusTxFailSet(uint32_t *NewTxFail);
extern void HoTTBridgeStatusTxFailGet(uint32_t *NewTxFail);
extern void HoTTBridgeStatusRxFailSet(uint32_t *NewRxFail);
extern void HoTTBridgeStatusRxFailGet(uint32_t *NewRxFail);


#endif // HOTTBRIDGESTATUS_H

/**
 * @}
 * @}
 */
