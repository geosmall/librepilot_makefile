/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup HwSPRacingF3EVOSettings HwSPRacingF3EVOSettings
 * @brief Seriously Pro SPRacingF3 EVO hardware configuration.
 *
 * Autogenerated files and functions for HwSPRacingF3EVOSettings Object
 *
 * @{
 *
 * @file       hwspracingf3evosettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the HwSPRacingF3EVOSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: hwspracingf3evosettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSPRACINGF3EVOSETTINGS_H
#define HWSPRACINGF3EVOSETTINGS_H
#include <stdbool.h>

/* Object constants */
#define HWSPRACINGF3EVOSETTINGS_OBJID 0x607C00A8
#define HWSPRACINGF3EVOSETTINGS_ISSINGLEINST 1
#define HWSPRACINGF3EVOSETTINGS_ISSETTINGS 1
#define HWSPRACINGF3EVOSETTINGS_ISPRIORITY 0
#define HWSPRACINGF3EVOSETTINGS_NUMBYTES sizeof(HwSPRacingF3EVOSettingsData)

/* Generic interface functions */
int32_t HwSPRacingF3EVOSettingsInitialize();
UAVObjHandle HwSPRacingF3EVOSettingsHandle();
void HwSPRacingF3EVOSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field UARTPort information */

// Enumeration options for field UARTPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3EVOSETTINGS_UARTPORT_DISABLED=0,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_TELEMETRY=1,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_GPS=2,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_SBUS=3,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_DSM=4,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_EXBUS=5,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_HOTTSUMD=6,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_HOTTSUMH=7,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_SRXL=8,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_IBUS=9,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_DEBUGCONSOLE=10,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_COMBRIDGE=11,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_MSP=12,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_MAVLINK=13,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_HOTTTELEMETRY=14,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_FRSKYSENSORHUB=15,
    HWSPRACINGF3EVOSETTINGS_UARTPORT_PPM=16
} HwSPRacingF3EVOSettingsUARTPortOptions;

// Number of elements for field UARTPort
#define HWSPRACINGF3EVOSETTINGS_UARTPORT_NUMELEM 3

/* Field I2CPort information */

// Enumeration options for field I2CPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3EVOSETTINGS_I2CPORT_DISABLED=0,
    HWSPRACINGF3EVOSETTINGS_I2CPORT_I2C=1
} HwSPRacingF3EVOSettingsI2CPortOptions;

/* Field LEDPort information */

// Enumeration options for field LEDPort
typedef enum __attribute__ ((__packed__)) {
    HWSPRACINGF3EVOSETTINGS_LEDPORT_DISABLED=0,
    HWSPRACINGF3EVOSETTINGS_LEDPORT_WS281X=1
} HwSPRacingF3EVOSettingsLEDPortOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        HwSPRacingF3EVOSettingsUARTPortOptions UARTPort[3];
    HwSPRacingF3EVOSettingsI2CPortOptions I2CPort;
    HwSPRacingF3EVOSettingsLEDPortOptions LEDPort;

} __attribute__((packed)) HwSPRacingF3EVOSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef HwSPRacingF3EVOSettingsDataPacked __attribute__((aligned(4))) HwSPRacingF3EVOSettingsData;

void HwSPRacingF3EVOSettingsDataOverrideDefaults(HwSPRacingF3EVOSettingsData * data);

/* Typesafe Object access functions */
static inline int32_t HwSPRacingF3EVOSettingsGet(HwSPRacingF3EVOSettingsData * dataOut) {
    return UAVObjGetData(HwSPRacingF3EVOSettingsHandle(), dataOut);
}
static inline int32_t HwSPRacingF3EVOSettingsSet(const HwSPRacingF3EVOSettingsData * dataIn) {
    return UAVObjSetData(HwSPRacingF3EVOSettingsHandle(), dataIn);
}
static inline int32_t HwSPRacingF3EVOSettingsInstGet(uint16_t instId, HwSPRacingF3EVOSettingsData * dataOut) {
    return UAVObjGetInstanceData(HwSPRacingF3EVOSettingsHandle(), instId, dataOut);
}
static inline int32_t HwSPRacingF3EVOSettingsInstSet(uint16_t instId, const HwSPRacingF3EVOSettingsData * dataIn) {
    return UAVObjSetInstanceData(HwSPRacingF3EVOSettingsHandle(), instId, dataIn);
}
static inline int32_t HwSPRacingF3EVOSettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(HwSPRacingF3EVOSettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t HwSPRacingF3EVOSettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwSPRacingF3EVOSettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t HwSPRacingF3EVOSettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(HwSPRacingF3EVOSettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t HwSPRacingF3EVOSettingsCreateInstance() {
    return UAVObjCreateInstance(HwSPRacingF3EVOSettingsHandle());
}
static inline void HwSPRacingF3EVOSettingsRequestUpdate() {
    UAVObjRequestUpdate(HwSPRacingF3EVOSettingsHandle());
}
static inline void HwSPRacingF3EVOSettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(HwSPRacingF3EVOSettingsHandle(), instId);
}
static inline void HwSPRacingF3EVOSettingsUpdated() {
    UAVObjUpdated(HwSPRacingF3EVOSettingsHandle());
}
static inline void HwSPRacingF3EVOSettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(HwSPRacingF3EVOSettingsHandle(), instId);
}
static inline void HwSPRacingF3EVOSettingsLogging() {
    UAVObjLogging(HwSPRacingF3EVOSettingsHandle());
}
static inline void HwSPRacingF3EVOSettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(HwSPRacingF3EVOSettingsHandle(), instId);
}
static inline int32_t HwSPRacingF3EVOSettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(HwSPRacingF3EVOSettingsHandle(), dataOut);
}
static inline int32_t HwSPRacingF3EVOSettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(HwSPRacingF3EVOSettingsHandle(), dataIn);
}
static inline int8_t HwSPRacingF3EVOSettingsReadOnly() {
    return UAVObjReadOnly(HwSPRacingF3EVOSettingsHandle());
}

/* Set/Get functions */
extern void HwSPRacingF3EVOSettingsUARTPortSet(HwSPRacingF3EVOSettingsUARTPortOptions *NewUARTPort);
extern void HwSPRacingF3EVOSettingsUARTPortGet(HwSPRacingF3EVOSettingsUARTPortOptions *NewUARTPort);
extern void HwSPRacingF3EVOSettingsI2CPortSet(HwSPRacingF3EVOSettingsI2CPortOptions *NewI2CPort);
extern void HwSPRacingF3EVOSettingsI2CPortGet(HwSPRacingF3EVOSettingsI2CPortOptions *NewI2CPort);
extern void HwSPRacingF3EVOSettingsLEDPortSet(HwSPRacingF3EVOSettingsLEDPortOptions *NewLEDPort);
extern void HwSPRacingF3EVOSettingsLEDPortGet(HwSPRacingF3EVOSettingsLEDPortOptions *NewLEDPort);


#endif // HWSPRACINGF3EVOSETTINGS_H

/**
 * @}
 * @}
 */
